===========================
Tests for ``add_integer()``
===========================

	>>> from '0-add_integer' import add_integer  # doctest: +SKIP
	>>> f = __import__('0-add_integer').add_integer

	>>> data = {\
	... 		'int': [0, 1, -1, 534, -435, 123456789, -123456789],\
	... 		'float': [0, 1.7, -1.7, 56.12345, -56.123456, 0.123456789, -0.123456789],\
	... 		'str': ["", "ta	b", "spa ce", "nospace", "@#$_&", "12ty"],\
	... 		'list': [[], [1, 2.6, "string", {}, set(), (), None]],\
	... 		'dict': [{}, {"k1": 1, "k2": None}],\
	... 		'set': [set(), {'k1', 'k2', 1, 2.7, ()}],\
	... 		'tuple': [(), (1, 2.9, "string", {}, None)],\
	... 		'none': [None]}

	>>> f(data['int'][0], data['int'][1])
	1
	>>> f(data['int'][0], data['float'][1])
	1
	>>> f(data['int'][0], data['str'][1])
	Traceback (most recent call last):
		...
	TypeError: b must be an integer
	>>> f(data['int'][0], None)
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> print(f(1, 2))
	3
	>>> print(f(100, -2))
	98
	>>> print(f(2))
	100
	>>> print(f(100.3, -2))
	98
	>>> print(f(10e1000, 1.7976931348623157e+308))  # doctest: +ELLIPSIS
	Traceback (innermost last):
	OverflowError: ...
	>>>
	>>>
	>>>


	### for key in data.keys():
	... 	for item in data[key]:  # data[key] == list object
	... 		for j in data[key]:
	... 			f(
